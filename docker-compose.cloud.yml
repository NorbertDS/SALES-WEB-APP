version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sales_analytics_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sales_analytics}
      POSTGRES_USER: ${POSTGRES_USER:-sales_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sales_password_2024}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database_enhancement.sql:/docker-entrypoint-initdb.d/enhancement.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sales_user} -d ${POSTGRES_DB:-sales_analytics}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sales_network

  # Redis for Session Management
  redis:
    image: redis:7-alpine
    container_name: sales_analytics_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_2024}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sales_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.cloud
    container_name: sales_analytics_api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-sales_user}:${POSTGRES_PASSWORD:-sales_password_2024}@postgres:5432/${POSTGRES_DB:-sales_analytics}
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-in-production}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password_2024}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - sales_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.cloud
    container_name: sales_analytics_frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./frontend/nginx.cloud.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    restart: unless-stopped
    networks:
      - sales_network

  # Nginx Load Balancer (Optional for high availability)
  nginx:
    image: nginx:alpine
    container_name: sales_analytics_nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - sales_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  sales_network:
    driver: bridge
